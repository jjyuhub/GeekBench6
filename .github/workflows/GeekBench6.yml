name: Geekbench 6 Runner Benchmark

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight UTC

jobs:
  benchmark-ubuntu:
    name: Benchmark Ubuntu Runner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and install Geekbench 6
        run: |
          wget https://cdn.geekbench.com/Geekbench-6.2.0-Linux.tar.gz
          tar xf Geekbench-6.2.0-Linux.tar.gz
          cd Geekbench-6.2.0-Linux
          
      - name: Run Geekbench 6
        run: |
          cd Geekbench-6.2.0-Linux
          ./geekbench6
          
      - name: Collect results
        run: |
          mkdir -p results
          
          # Look for the most recent result file
          RESULTS_DIR="$HOME/.geekbench6/results"
          if [ -d "$RESULTS_DIR" ]; then
            LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
            if [ -n "$LATEST_RESULT" ]; then
              cp "$LATEST_RESULT" ./results/ubuntu-latest.json
              echo "Copied result from $LATEST_RESULT"
            else
              echo "No result files found in $RESULTS_DIR"
              echo '{"error": "No results found"}' > ./results/ubuntu-latest.json
            fi
          else
            echo "Results directory not found at $RESULTS_DIR"
            
            # Try alternate location
            RESULTS_DIR="$(pwd)/Geekbench-6.2.0-Linux/results"
            if [ -d "$RESULTS_DIR" ]; then
              LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
              if [ -n "$LATEST_RESULT" ]; then
                cp "$LATEST_RESULT" ./results/ubuntu-latest.json
                echo "Copied result from $LATEST_RESULT"
              else
                echo "No result files found in $RESULTS_DIR"
                echo '{"error": "No results found"}' > ./results/ubuntu-latest.json
              fi
            else
              echo "Alternate results directory not found at $RESULTS_DIR"
              echo '{"error": "Results directory not found"}' > ./results/ubuntu-latest.json
            fi
          fi
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-ubuntu
          path: results/
          retention-days: 90

  benchmark-windows:
    name: Benchmark Windows Runner
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and install Geekbench 6
        run: |
          Invoke-WebRequest -Uri "https://cdn.geekbench.com/Geekbench-6.0.0-WindowsSetup.exe" -OutFile "Geekbench-6.0.0-WindowsSetup.exe"
          Start-Process -FilePath ".\Geekbench-6.0.0-WindowsSetup.exe" -ArgumentList "/S" -Wait
          Start-Sleep -Seconds 10
          
      - name: Create results directory
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path ".\results"
      
      - name: Run Geekbench 6
        shell: powershell
        run: |
          # Try to find Geekbench executable with a timeout to prevent hanging
          $geekbenchPath = ""
          
          Write-Host "Searching for Geekbench installation..."
          
          # Common installation locations to check
          $possiblePaths = @(
            "C:\Program Files\Geekbench 6\geekbench_x86_64.exe",
            "C:\Program Files\Geekbench 6\geekbench6.exe",
            "C:\Program Files (x86)\Geekbench 6\geekbench_x86_64.exe",
            "C:\Program Files (x86)\Geekbench 6\geekbench6.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $geekbenchPath = $path
              Write-Host "Found Geekbench at: $geekbenchPath"
              break
            }
          }
          
          if ($geekbenchPath -eq "") {
            Write-Host "Geekbench executable not found in common locations. Installing portable version..."
            
            # Download portable version as fallback
            Invoke-WebRequest -Uri "https://cdn.geekbench.com/Geekbench-6.0.0-WindowsSetup.exe" -OutFile "Geekbench-Portable.exe"
            Start-Process -FilePath ".\Geekbench-Portable.exe" -ArgumentList "/S" -Wait
            Start-Sleep -Seconds 10
            
            # Try again with common paths
            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                $geekbenchPath = $path
                Write-Host "Found Geekbench at: $geekbenchPath after installation"
                break
              }
            }
          }
          
          if ($geekbenchPath -eq "") {
            Write-Host "Geekbench not found after installation attempt. Creating dummy result."
            '{"error": "Geekbench executable not found"}' | Out-File ".\results\windows-latest.json" -Force
          } else {
            # Run Geekbench
            Write-Host "Running Geekbench from: $geekbenchPath"
            Start-Process -FilePath $geekbenchPath -Wait
          }
          
      - name: Collect results
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path ".\results"
          $resultsFolder = "$env:USERPROFILE\Documents\Geekbench 6\Results"
          
          # Check if results directory exists
          if (Test-Path $resultsFolder) {
            $latestFile = Get-ChildItem -Path $resultsFolder -Filter "*.json" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($latestFile) {
              Copy-Item -Path $latestFile.FullName -Destination ".\results\windows-latest.json"
            } else {
              Write-Host "No JSON results found in $resultsFolder"
              # Create dummy file so workflow doesn't fail
              '{"error": "No results found"}' | Out-File ".\results\windows-latest.json"
            }
          } else {
            Write-Host "Results folder not found at $resultsFolder"
            # Create dummy file so workflow doesn't fail
            '{"error": "Results folder not found"}' | Out-File ".\results\windows-latest.json"
          }
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-windows
          path: results/
          retention-days: 90

  benchmark-macos-intel:
    name: Benchmark macOS Intel Runner
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and install Geekbench 6
        run: |
          # Download the Geekbench 6 CLI version directly
          curl -L -o geekbench6.zip https://cdn.geekbench.com/Geekbench-6.2.0-Mac.zip
          unzip -l geekbench6.zip
          unzip geekbench6.zip
          ls -la
          
      - name: Run Geekbench 6
        run: |
          # Find the correct directory
          GB_DIR=$(find . -type d -name "Geekbench*" -depth 1 | head -1)
          if [ -z "$GB_DIR" ]; then
            echo "Geekbench directory not found"
            mkdir -p results
            echo '{"error": "Geekbench directory not found"}' > ./results/macos-intel-latest.json
            exit 0
          fi
          
          echo "Found Geekbench directory: $GB_DIR"
          cd "$GB_DIR"
          
          # Find and run the executable
          GB_EXE=$(find . -name "geekbench*" -type f -perm +111 | head -1)
          if [ -z "$GB_EXE" ]; then
            echo "Geekbench executable not found"
            mkdir -p ../results
            echo '{"error": "Geekbench executable not found"}' > ../results/macos-intel-latest.json
            exit 0
          fi
          
          echo "Found executable: $GB_EXE"
          chmod +x "$GB_EXE"
          
          # Run Geekbench (CPU only for faster execution)
          ./"$GB_EXE" --cpu || echo "Geekbench completed with non-zero exit code"
          
      - name: Collect results
        run: |
          mkdir -p results
          
          # Check for results in the standard location
          RESULTS_DIR="$HOME/Library/Application Support/Geekbench/Geekbench 6/Results"
          if [ -d "$RESULTS_DIR" ]; then
            LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -f2- -d" ")
            if [ -n "$LATEST_RESULT" ]; then
              cp "$LATEST_RESULT" ./results/macos-intel-latest.json
              echo "Copied result from $LATEST_RESULT"
            else
              echo "No result files found in $RESULTS_DIR"
              echo '{"error": "No results found"}' > ./results/macos-intel-latest.json
            fi
          else
            echo "Results directory not found at $RESULTS_DIR"
            
            # Try the local results directory from the CLI version
            GB_DIR=$(find . -type d -name "Geekbench*" -depth 1 | head -1)
            if [ -n "$GB_DIR" ]; then
              RESULTS_DIR="./$GB_DIR/results"
              if [ -d "$RESULTS_DIR" ]; then
                LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -f2- -d" ")
                if [ -n "$LATEST_RESULT" ]; then
                  cp "$LATEST_RESULT" ./results/macos-intel-latest.json
                  echo "Copied result from $LATEST_RESULT"
                else
                  echo "No result files found in $RESULTS_DIR"
                  echo '{"error": "No results found"}' > ./results/macos-intel-latest.json
                fi
              else
                echo "Local results directory not found at $RESULTS_DIR"
                echo '{"error": "Results directory not found"}' > ./results/macos-intel-latest.json
              fi
            else
              echo '{"error": "Geekbench directory not found"}' > ./results/macos-intel-latest.json
            fi
          fi
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-macos-intel
          path: results/
          retention-days: 90

  benchmark-macos-arm:
    name: Benchmark macOS ARM Runner
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and install Geekbench 6
        run: |
          # Download the Geekbench 6 CLI version directly
          curl -L -o geekbench6.zip https://cdn.geekbench.com/Geekbench-6.2.0-Mac.zip
          unzip -l geekbench6.zip
          unzip geekbench6.zip
          ls -la
          
      - name: Run Geekbench 6
        run: |
          # Find the correct directory
          GB_DIR=$(find . -type d -name "Geekbench*" -depth 1 | head -1)
          if [ -z "$GB_DIR" ]; then
            echo "Geekbench directory not found"
            mkdir -p results
            echo '{"error": "Geekbench directory not found"}' > ./results/macos-arm-latest.json
            exit 0
          fi
          
          echo "Found Geekbench directory: $GB_DIR"
          cd "$GB_DIR"
          
          # Find and run the executable
          GB_EXE=$(find . -name "geekbench*" -type f -perm +111 | head -1)
          if [ -z "$GB_EXE" ]; then
            echo "Geekbench executable not found"
            mkdir -p ../results
            echo '{"error": "Geekbench executable not found"}' > ../results/macos-arm-latest.json
            exit 0
          fi
          
          echo "Found executable: $GB_EXE"
          chmod +x "$GB_EXE"
          
          # Run Geekbench (CPU only for faster execution)
          ./"$GB_EXE" --cpu || echo "Geekbench completed with non-zero exit code"
          
      - name: Collect results
        run: |
          mkdir -p results
          
          # Check for results in the standard location
          RESULTS_DIR="$HOME/Library/Application Support/Geekbench/Geekbench 6/Results"
          if [ -d "$RESULTS_DIR" ]; then
            LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -f2- -d" ")
            if [ -n "$LATEST_RESULT" ]; then
              cp "$LATEST_RESULT" ./results/macos-arm-latest.json
              echo "Copied result from $LATEST_RESULT"
            else
              echo "No result files found in $RESULTS_DIR"
              echo '{"error": "No results found"}' > ./results/macos-arm-latest.json
            fi
          else
            echo "Results directory not found at $RESULTS_DIR"
            
            # Try the local results directory from the CLI version
            GB_DIR=$(find . -type d -name "Geekbench*" -depth 1 | head -1)
            if [ -n "$GB_DIR" ]; then
              RESULTS_DIR="./$GB_DIR/results"
              if [ -d "$RESULTS_DIR" ]; then
                LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -f2- -d" ")
                if [ -n "$LATEST_RESULT" ]; then
                  cp "$LATEST_RESULT" ./results/macos-arm-latest.json
                  echo "Copied result from $LATEST_RESULT"
                else
                  echo "No result files found in $RESULTS_DIR"
                  echo '{"error": "No results found"}' > ./results/macos-arm-latest.json
                fi
              else
                echo "Local results directory not found at $RESULTS_DIR"
                echo '{"error": "Results directory not found"}' > ./results/macos-arm-latest.json
              fi
            else
              echo '{"error": "Geekbench directory not found"}' > ./results/macos-arm-latest.json
            fi
          fi
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-macos-arm
          path: results/
          retention-days: 90

  summarize-results:
    name: Summarize Benchmark Results
    needs: [benchmark-ubuntu, benchmark-windows, benchmark-macos-intel, benchmark-macos-arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          path: all-results
          
      - name: Install jq for JSON parsing
        run: sudo apt-get install -y jq
        
      - name: Generate summary report
        run: |
          echo "# Geekbench 6 Benchmark Results" > benchmark-report.md
          echo "Run date: $(date)" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "## Runner Specifications" >> benchmark-report.md
          echo "" >> benchmark-report.md
          
          # Process Ubuntu results
          echo "### Ubuntu Latest" >> benchmark-report.md
          UBUNTU_FILE=$(find all-results -name "ubuntu-latest.json" -type f | head -n 1)
          if [ -f "$UBUNTU_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Process Windows results
          echo "### Windows Latest" >> benchmark-report.md
          WINDOWS_FILE=$(find all-results -name "windows-latest.json" -type f | head -n 1)
          if [ -f "$WINDOWS_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Process macOS Intel results
          echo "### macOS Intel Latest" >> benchmark-report.md
          MACOS_INTEL_FILE=$(find all-results -name "macos-intel-latest.json" -type f | head -n 1)
          if [ -f "$MACOS_INTEL_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Process macOS ARM results
          echo "### macOS ARM Latest (Apple Silicon)" >> benchmark-report.md
          MACOS_ARM_FILE=$(find all-results -name "macos-arm-latest.json" -type f | head -n 1)
          if [ -f "$MACOS_ARM_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Add comparison table
          echo "## Score Comparison" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "| Runner | Single-Core Score | Multi-Core Score |" >> benchmark-report.md
          echo "|--------|-------------------|------------------|" >> benchmark-report.md
          
          # Ubuntu
          UBUNTU_SINGLE=$(jq -r '.single_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
          UBUNTU_MULTI=$(jq -r '.multi_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
          echo "| Ubuntu Latest | $UBUNTU_SINGLE | $UBUNTU_MULTI |" >> benchmark-report.md
          
          # Windows
          WINDOWS_SINGLE=$(jq -r '.single_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
          WINDOWS_MULTI=$(jq -r '.multi_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
          echo "| Windows Latest | $WINDOWS_SINGLE | $WINDOWS_MULTI |" >> benchmark-report.md
          
          # macOS Intel
          MACOS_INTEL_SINGLE=$(jq -r '.single_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
          MACOS_INTEL_MULTI=$(jq -r '.multi_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
          echo "| macOS Intel | $MACOS_INTEL_SINGLE | $MACOS_INTEL_MULTI |" >> benchmark-report.md
          
          # macOS ARM
          MACOS_ARM_SINGLE=$(jq -r '.single_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
          MACOS_ARM_MULTI=$(jq -r '.multi_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
          echo "| macOS ARM | $MACOS_ARM_SINGLE | $MACOS_ARM_MULTI |" >> benchmark-report.md
          
      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: benchmark-report.md
          retention-days: 90
