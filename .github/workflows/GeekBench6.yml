name: Geekbench 6 Runner Benchmark

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight UTC

jobs:
  benchmark-ubuntu:
    name: Benchmark Ubuntu Runner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and install Geekbench 6
        run: |
          wget https://cdn.geekbench.com/Geekbench-6.2.0-Linux.tar.gz
          tar xf Geekbench-6.2.0-Linux.tar.gz
          cd Geekbench-6.2.0-Linux
          
      - name: Run Geekbench 6
        run: |
          cd Geekbench-6.2.0-Linux
          ./geekbench6
          
      - name: Collect results
        run: |
          mkdir -p results
          
          # Look for the most recent result file
          RESULTS_DIR="$HOME/.geekbench6/results"
          if [ -d "$RESULTS_DIR" ]; then
            LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
            if [ -n "$LATEST_RESULT" ]; then
              cp "$LATEST_RESULT" ./results/ubuntu-latest.json
              echo "Copied result from $LATEST_RESULT"
            else
              echo "No result files found in $RESULTS_DIR"
              echo '{"error": "No results found"}' > ./results/ubuntu-latest.json
            fi
          else
            echo "Results directory not found at $RESULTS_DIR"
            
            # Try alternate location
            RESULTS_DIR="$(pwd)/Geekbench-6.2.0-Linux/results"
            if [ -d "$RESULTS_DIR" ]; then
              LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
              if [ -n "$LATEST_RESULT" ]; then
                cp "$LATEST_RESULT" ./results/ubuntu-latest.json
                echo "Copied result from $LATEST_RESULT"
              else
                echo "No result files found in $RESULTS_DIR"
                echo '{"error": "No results found"}' > ./results/ubuntu-latest.json
              fi
            else
              echo "Alternate results directory not found at $RESULTS_DIR"
              echo '{"error": "Results directory not found"}' > ./results/ubuntu-latest.json
            fi
          fi
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-ubuntu
          path: results/
          retention-days: 90

  benchmark-windows:
    name: Benchmark Windows Runner
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Environment information
        run: |
          Write-Host "======== Environment Information ========"
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Host "Windows Version: $(cmd /c ver)"
          Write-Host "Current Directory: $(Get-Location)"
          Write-Host "Current User: $(whoami)"
          Write-Host "Available disk space:"
          Get-PSDrive -PSProvider FileSystem | Format-Table -Property Name, Used, Free
          Write-Host "========================================"
        shell: pwsh
      
      - name: Create results directory
        run: |
          Write-Host "Creating results directory..."
          $resultsDir = "$(Get-Location)\results"
          
          if (Test-Path $resultsDir) {
            Write-Host "Results directory already exists at: $resultsDir"
          } else {
            New-Item -Path $resultsDir -ItemType Directory -Force
            Write-Host "Results directory created at: $resultsDir"
          }
          
          # Verify directory exists
          if (Test-Path $resultsDir) {
            Write-Host "✓ Results directory confirmed at: $resultsDir"
          } else {
            Write-Error "❌ Failed to create results directory!"
            exit 1
          }
        shell: pwsh
      
      - name: Download Geekbench 6
        run: |
          Write-Host "Downloading Geekbench 6..."
          $downloadUrl = "https://cdn.geekbench.com/Geekbench-6.2.1-WindowsSetup.exe"
          $setupFile = "$(Get-Location)\gb6_setup.exe"
          
          Write-Host "Download URL: $downloadUrl"
          Write-Host "Target file: $setupFile"
          
          try {
            Invoke-WebRequest -Uri $downloadUrl -OutFile $setupFile -UseBasicParsing -Verbose
            Write-Host "Download completed successfully."
          } catch {
            Write-Error "❌ Failed to download Geekbench 6: $_"
            exit 1
          }
          
          # Verify download
          if (Test-Path $setupFile) {
            $fileSize = (Get-Item $setupFile).Length / 1MB
            Write-Host "✓ Downloaded file verified. Size: $([math]::Round($fileSize, 2)) MB"
          } else {
            Write-Error "❌ Download verification failed - setup file not found!"
            exit 1
          }
        shell: pwsh
      
      - name: Install Geekbench 6
        run: |
          Write-Host "Installing Geekbench 6..."
          $setupFile = "$(Get-Location)\gb6_setup.exe"
          
          # Verify installer exists
          if (-Not (Test-Path $setupFile)) {
            Write-Error "❌ Geekbench 6 installer not found at: $setupFile"
            exit 1
          }
          
          Write-Host "Running installer silently with /S flag..."
          try {
            $process = Start-Process -FilePath $setupFile -ArgumentList "/S" -Wait -PassThru -Verbose
            Write-Host "Installation process completed with exit code: $($process.ExitCode)"
          } catch {
            Write-Error "❌ Installation failed: $_"
            exit 1
          }
          
          # Check common installation paths
          $possiblePaths = @(
            "C:\Program Files\Geekbench 6\geekbench6.exe",
            "C:\Program Files (x86)\Geekbench 6\geekbench6.exe",
            "${env:ProgramFiles}\Geekbench 6\geekbench6.exe",
            "${env:ProgramFiles(x86)}\Geekbench 6\geekbench6.exe",
            "${env:LOCALAPPDATA}\Programs\Geekbench 6\geekbench6.exe"
          )
          
          Write-Host "Checking for Geekbench 6 executable in possible installation paths..."
          $foundPaths = @()
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "✓ Found at: $path"
              $foundPaths += $path
            } else {
              Write-Host "✗ Not found at: $path"
            }
          }
          
          # Search for Geekbench in Program Files if not found
          if ($foundPaths.Count -eq 0) {
            Write-Host "Searching for Geekbench 6 in Program Files directories..."
            $searchDirs = @(
              "C:\Program Files",
              "C:\Program Files (x86)"
            )
            
            foreach ($dir in $searchDirs) {
              if (Test-Path $dir) {
                Write-Host "Searching in $dir..."
                $found = Get-ChildItem -Path $dir -Recurse -Filter "geekbench*.exe" -ErrorAction SilentlyContinue | Select-Object -First 5
                foreach ($item in $found) {
                  Write-Host "Found: $($item.FullName)"
                  $foundPaths += $item.FullName
                }
              }
            }
          }
          
          # Set the installation state for next steps
          if ($foundPaths.Count -gt 0) {
            Write-Host "✓ Geekbench executable found in $($foundPaths.Count) location(s)"
            $foundPaths | ForEach-Object { Write-Host "  - $_" }
            
            # Create a file with the found path to use in next step
            $foundPaths[0] | Out-File -FilePath ".\geekbench_path.txt"
            Write-Host "✓ Installation verified."
          } else {
            Write-Error "❌ Geekbench executable not found in any expected location after installation!"
            
            # List all installed programs for debugging
            Write-Host "Listing all installed programs for debugging..."
            Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | 
              Where-Object { $_.DisplayName -like "*Geekbench*" } | 
              Select-Object DisplayName, DisplayVersion, InstallLocation, InstallDate |
              Format-Table -AutoSize
              
            exit 1
          }
        shell: pwsh
      
      - name: Run Geekbench 6 benchmark
        run: |
          Write-Host "Running Geekbench 6 benchmark..."
          
          # Read Geekbench path from file created in previous step
          if (Test-Path ".\geekbench_path.txt") {
            $GB_PATH = Get-Content ".\geekbench_path.txt" -Raw
            $GB_PATH = $GB_PATH.Trim()
            Write-Host "Using Geekbench path from file: $GB_PATH"
          } else {
            # Default paths if file not found
            $possiblePaths = @(
              "C:\Program Files\Geekbench 6\geekbench6.exe",
              "C:\Program Files (x86)\Geekbench 6\geekbench6.exe",
              "${env:ProgramFiles}\Geekbench 6\geekbench6.exe",
              "${env:ProgramFiles(x86)}\Geekbench 6\geekbench6.exe",
              "${env:LOCALAPPDATA}\Programs\Geekbench 6\geekbench6.exe"
            )
            
            $GB_PATH = $null
            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                $GB_PATH = $path
                Write-Host "Found Geekbench at: $GB_PATH"
                break
              }
            }
            
            if (-Not $GB_PATH) {
              Write-Error "❌ Geekbench 6 executable not found at any expected location"
              exit 1
            }
          }
          
          # Create results directory if it doesn't exist
          $resultsDir = "$(Get-Location)\results"
          if (-Not (Test-Path $resultsDir)) {
            New-Item -Path $resultsDir -ItemType Directory -Force
            Write-Host "Created results directory: $resultsDir"
          }
          
          $resultsFile = "$resultsDir\geekbench_results.txt"
          
          # Verify Geekbench executable exists
          if (-Not (Test-Path $GB_PATH)) {
            Write-Error "❌ Geekbench 6 executable not found at: $GB_PATH"
            exit 1
          }
          
          # Get Geekbench file information
          $fileInfo = Get-Item $GB_PATH
          Write-Host "Geekbench file details:"
          Write-Host "  - Path: $($fileInfo.FullName)"
          Write-Host "  - Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          Write-Host "  - Created: $($fileInfo.CreationTime)"
          Write-Host "  - Directory contents:"
          Get-ChildItem -Path $fileInfo.Directory | Format-Table Name, Length, LastWriteTime
          
          # Run benchmark with basic options (free version)
          # Note: Free version doesn't support --no-upload flag
          Write-Host "Starting benchmark with command: $GB_PATH --cpu"
          try {
            # Create a custom log file
            $logFile = "$resultsDir\benchmark_log.txt"
            
            # Run benchmark without --no-upload flag (free version)
            $benchmarkProcess = Start-Process -FilePath $GB_PATH -ArgumentList "--cpu" -Wait -PassThru -NoNewWindow -RedirectStandardOutput $logFile
            $exitCode = $benchmarkProcess.ExitCode
            Write-Host "Benchmark process completed with exit code: $exitCode"
            
            # Get the log contents
            if (Test-Path $logFile) {
              Write-Host "Benchmark log:"
              Get-Content $logFile | ForEach-Object { Write-Host "  $_" }
            }
            
            # Capture system information manually
            Write-Host "Capturing system information..."
            $sysInfoFile = "$resultsDir\system_info.txt"
            
            # CPU Information
            $cpuInfo = Get-WmiObject -Class Win32_Processor
            "CPU Information:" | Out-File -FilePath $sysInfoFile
            "Model: $($cpuInfo.Name)" | Out-File -FilePath $sysInfoFile -Append
            "Cores: $($cpuInfo.NumberOfCores)" | Out-File -FilePath $sysInfoFile -Append
            "Logical Processors: $($cpuInfo.NumberOfLogicalProcessors)" | Out-File -FilePath $sysInfoFile -Append
            "Max Clock Speed: $($cpuInfo.MaxClockSpeed) MHz" | Out-File -FilePath $sysInfoFile -Append
            
            # RAM Information
            $ramInfo = Get-WmiObject -Class Win32_ComputerSystem
            $ramSizeGB = [math]::Round($ramInfo.TotalPhysicalMemory / 1GB, 2)
            "`nRAM Information:" | Out-File -FilePath $sysInfoFile -Append
            "Total RAM: $ramSizeGB GB" | Out-File -FilePath $sysInfoFile -Append
            
            # GPU Information (if available)
            $gpuInfo = Get-WmiObject -Class Win32_VideoController
            "`nGPU Information:" | Out-File -FilePath $sysInfoFile -Append
            foreach ($gpu in $gpuInfo) {
              "GPU Name: $($gpu.Name)" | Out-File -FilePath $sysInfoFile -Append
              "Driver Version: $($gpu.DriverVersion)" | Out-File -FilePath $sysInfoFile -Append
              "Video RAM: $([math]::Round($gpu.AdapterRAM / 1MB, 2)) MB" | Out-File -FilePath $sysInfoFile -Append
            }
            
            # OS Information
            $osInfo = Get-WmiObject -Class Win32_OperatingSystem
            "`nOS Information:" | Out-File -FilePath $sysInfoFile -Append
            "OS Name: $($osInfo.Caption)" | Out-File -FilePath $sysInfoFile -Append
            "OS Version: $($osInfo.Version)" | Out-File -FilePath $sysInfoFile -Append
            "OS Architecture: $($osInfo.OSArchitecture)" | Out-File -FilePath $sysInfoFile -Append
            
            # Disk Information
            $diskInfo = Get-WmiObject -Class Win32_LogicalDisk -Filter "DriveType=3"
            "`nDisk Information:" | Out-File -FilePath $sysInfoFile -Append
            foreach ($disk in $diskInfo) {
              $sizeGB = [math]::Round($disk.Size / 1GB, 2)
              $freeGB = [math]::Round($disk.FreeSpace / 1GB, 2)
              "Drive $($disk.DeviceID): Total $sizeGB GB, Free $freeGB GB" | Out-File -FilePath $sysInfoFile -Append
            }
            
            # Verify system info file
            if (Test-Path $sysInfoFile) {
              Write-Host "System information captured successfully"
              Write-Host "System info summary:"
              Get-Content $sysInfoFile | ForEach-Object { Write-Host "  $_" }
            } else {
              Write-Host "Failed to create system information file"
            }
            
            # Create a results file if it doesn't exist
            if (-Not (Test-Path $resultsFile)) {
              "Geekbench 6 Benchmark Results" | Out-File -FilePath $resultsFile
              "Run Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" | Out-File -FilePath $resultsFile -Append
              "Note: This run used Geekbench 6 free version which doesn't support --no-upload flag." | Out-File -FilePath $resultsFile -Append
              "Please check Geekbench Browser for full results." | Out-File -FilePath $resultsFile -Append
            }
            
            # Consider benchmark successful if exitcode is 0
            if ($exitCode -eq 0) {
              Write-Host "✓ Benchmark completed successfully"
            } else {
              Write-Host "⚠️ Benchmark completed with non-zero exit code: $exitCode"
            }
          } catch {
            Write-Error "❌ Failed to run benchmark: $_"
            exit 1
          }
          
          # Ensure we have files to upload as artifacts
          $anyFilesCreated = (Test-Path $logFile) -or (Test-Path $sysInfoFile) -or (Test-Path $resultsFile)
          if (-Not $anyFilesCreated) {
            # Create a basic results file if nothing else was created
            "Geekbench 6 Benchmark Run" | Out-File -FilePath $resultsFile
            "Run Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" | Out-File -FilePath $resultsFile -Append
            "Benchmark attempted but no detailed results were captured." | Out-File -FilePath $resultsFile -Append
          }
        shell: pwsh
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-windows
          path: results/
          retention-days: 90
        if: always()  # Try to upload even if previous steps failed

  benchmark-macos-intel:
    name: Benchmark macOS Intel Runner
    runs-on: macos-11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and install Geekbench 6
        run: |
          # Download the Geekbench 6 CLI version directly
          curl -L -o geekbench6.zip https://cdn.geekbench.com/Geekbench-6.2.0-Mac.zip
          unzip -l geekbench6.zip
          unzip geekbench6.zip
          ls -la
          
      - name: Run Geekbench 6
        run: |
          # Find the correct directory
          GB_DIR=$(find . -type d -name "Geekbench*" -depth 1 | head -1)
          if [ -z "$GB_DIR" ]; then
            echo "Geekbench directory not found"
            mkdir -p results
            echo '{"error": "Geekbench directory not found"}' > ./results/macos-intel-latest.json
            exit 0
          fi
          
          echo "Found Geekbench directory: $GB_DIR"
          cd "$GB_DIR"
          
          # Find and run the executable
          GB_EXE=$(find . -name "geekbench*" -type f -perm +111 | head -1)
          if [ -z "$GB_EXE" ]; then
            echo "Geekbench executable not found"
            mkdir -p ../results
            echo '{"error": "Geekbench executable not found"}' > ../results/macos-intel-latest.json
            exit 0
          fi
          
          echo "Found executable: $GB_EXE"
          chmod +x "$GB_EXE"
          
          # Run Geekbench (CPU only for faster execution)
          ./"$GB_EXE" --cpu || echo "Geekbench completed with non-zero exit code"
          
      - name: Collect results
        run: |
          mkdir -p results
          
          # Check for results in the standard location
          RESULTS_DIR="$HOME/Library/Application Support/Geekbench/Geekbench 6/Results"
          if [ -d "$RESULTS_DIR" ]; then
            LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -f2- -d" ")
            if [ -n "$LATEST_RESULT" ]; then
              cp "$LATEST_RESULT" ./results/macos-intel-latest.json
              echo "Copied result from $LATEST_RESULT"
            else
              echo "No result files found in $RESULTS_DIR"
              echo '{"error": "No results found"}' > ./results/macos-intel-latest.json
            fi
          else
            echo "Results directory not found at $RESULTS_DIR"
            
            # Try the local results directory from the CLI version
            GB_DIR=$(find . -type d -name "Geekbench*" -depth 1 | head -1)
            if [ -n "$GB_DIR" ]; then
              RESULTS_DIR="./$GB_DIR/results"
              if [ -d "$RESULTS_DIR" ]; then
                LATEST_RESULT=$(find "$RESULTS_DIR" -name "*.json" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -f2- -d" ")
                if [ -n "$LATEST_RESULT" ]; then
                  cp "$LATEST_RESULT" ./results/macos-intel-latest.json
                  echo "Copied result from $LATEST_RESULT"
                else
                  echo "No result files found in $RESULTS_DIR"
                  echo '{"error": "No results found"}' > ./results/macos-intel-latest.json
                fi
              else
                echo "Local results directory not found at $RESULTS_DIR"
                echo '{"error": "Results directory not found"}' > ./results/macos-intel-latest.json
              fi
            else
              echo '{"error": "Geekbench directory not found"}' > ./results/macos-intel-latest.json
            fi
          fi
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results-macos-intel
          path: results/
          retention-days: 90

  benchmark-macos-arm:
    name: Benchmark macOS ARM Runner
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check CPU architecture
        run: |
          echo "Running on: $(uname -m)"
          # Should output 'arm64' on Apple Silicon
          if [ "$(uname -m)" != "arm64" ]; then
            echo "::error::Not running on ARM architecture!"
            exit 1
          fi
      - name: Download and install Geekbench 6
        run: |
          # Download the Geekbench 6 CLI version directly
          curl -L -o geekbench6.zip https://cdn.geekbench.com/Geekbench-6.2.0-Mac.zip
          unzip -q geekbench6.zip
          
          # Create results directory
          mkdir -p results
          
          # Show the extracted contents to debug
          find . -name "geekbench*" -type f
      - name: Find ARM executable
        run: |
          # Look specifically for ARM executables first
          GB_EXE=$(find . -name "geekbench_arm64" -o -name "geekbench_aarch64" -type f | head -1)
          
          # If no ARM executable, force error as we need to run on ARM
          if [ -z "$GB_EXE" ]; then
            echo "::error::No ARM Geekbench executable found!"
            # List all executables for debugging
            echo "Available executables:"
            find . -name "geekbench*" -type f -perm +111 | xargs file
            echo '{"error": "No ARM executable found"}' > ./results/macos-arm-latest.json
            exit 1
          fi
          
          echo "Found ARM executable: $GB_EXE"
          file "$GB_EXE"
          
          # Make executable
          chmod +x "$GB_EXE"
          
          # Save path for next step
          echo "GB_EXE=$GB_EXE" >> $GITHUB_ENV
      - name: Run Geekbench on ARM
        run: |
          # Run Geekbench (CPU only, don't use --no-upload as it requires Pro)
          echo "Running benchmark with: $GB_EXE"
          "$GB_EXE" --cpu || echo "Geekbench completed with non-zero exit code"
          
          # Look for results - they're timestamped
          RESULTS_FILE=$(find . -name "*.gb6" -type f -newer geekbench6.zip | head -1)
          
          if [ -n "$RESULTS_FILE" ]; then
            echo "Benchmark results found at: $RESULTS_FILE"
            # Copy results to output directory
            cp "$RESULTS_FILE" ./results/macos-arm-latest.gb6
          else
            echo "::warning::No benchmark results file found"
            echo '{"error": "No benchmark results generated"}' > ./results/macos-arm-latest.json
          fi
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm-benchmark-results
          path: ./results/
          retention-days: 90

  summarize-results:
    name: Summarize Benchmark Results
    needs: [benchmark-ubuntu, benchmark-windows, benchmark-macos-intel, benchmark-macos-arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          path: all-results
          
      - name: Install jq for JSON parsing
        run: sudo apt-get install -y jq
        
      - name: Generate summary report
        run: |
          echo "# Geekbench 6 Benchmark Results" > benchmark-report.md
          echo "Run date: $(date)" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "## Runner Specifications" >> benchmark-report.md
          echo "" >> benchmark-report.md
          
          # Process Ubuntu results
          echo "### Ubuntu Latest" >> benchmark-report.md
          UBUNTU_FILE=$(find all-results -name "ubuntu-latest.json" -type f | head -n 1)
          if [ -f "$UBUNTU_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Process Windows results
          echo "### Windows Latest" >> benchmark-report.md
          WINDOWS_FILE=$(find all-results -name "windows-latest.json" -type f | head -n 1)
          if [ -f "$WINDOWS_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Process macOS Intel results
          echo "### macOS Intel Latest" >> benchmark-report.md
          MACOS_INTEL_FILE=$(find all-results -name "macos-intel-latest.json" -type f | head -n 1)
          if [ -f "$MACOS_INTEL_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Process macOS ARM results
          echo "### macOS ARM Latest (Apple Silicon)" >> benchmark-report.md
          MACOS_ARM_FILE=$(find all-results -name "macos-arm-latest.json" -type f | head -n 1)
          if [ -f "$MACOS_ARM_FILE" ]; then
            SINGLE_SCORE=$(jq -r '.single_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            MULTI_SCORE=$(jq -r '.multi_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            CPU_NAME=$(jq -r '.system_info.processor' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            MEMORY=$(jq -r '.system_info.memory_size_bytes/1073741824 | floor' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
            echo "- CPU: $CPU_NAME" >> benchmark-report.md
            echo "- Memory: ${MEMORY}GB" >> benchmark-report.md
            echo "- Single-Core Score: $SINGLE_SCORE" >> benchmark-report.md
            echo "- Multi-Core Score: $MULTI_SCORE" >> benchmark-report.md
          else
            echo "- No results found" >> benchmark-report.md
          fi
          echo "" >> benchmark-report.md
          
          # Add comparison table
          echo "## Score Comparison" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "| Runner | Single-Core Score | Multi-Core Score |" >> benchmark-report.md
          echo "|--------|-------------------|------------------|" >> benchmark-report.md
          
          # Ubuntu
          UBUNTU_SINGLE=$(jq -r '.single_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
          UBUNTU_MULTI=$(jq -r '.multi_core.score' "$UBUNTU_FILE" 2>/dev/null || echo "N/A")
          echo "| Ubuntu Latest | $UBUNTU_SINGLE | $UBUNTU_MULTI |" >> benchmark-report.md
          
          # Windows
          WINDOWS_SINGLE=$(jq -r '.single_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
          WINDOWS_MULTI=$(jq -r '.multi_core.score' "$WINDOWS_FILE" 2>/dev/null || echo "N/A")
          echo "| Windows Latest | $WINDOWS_SINGLE | $WINDOWS_MULTI |" >> benchmark-report.md
          
          # macOS Intel
          MACOS_INTEL_SINGLE=$(jq -r '.single_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
          MACOS_INTEL_MULTI=$(jq -r '.multi_core.score' "$MACOS_INTEL_FILE" 2>/dev/null || echo "N/A")
          echo "| macOS Intel | $MACOS_INTEL_SINGLE | $MACOS_INTEL_MULTI |" >> benchmark-report.md
          
          # macOS ARM
          MACOS_ARM_SINGLE=$(jq -r '.single_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
          MACOS_ARM_MULTI=$(jq -r '.multi_core.score' "$MACOS_ARM_FILE" 2>/dev/null || echo "N/A")
          echo "| macOS ARM | $MACOS_ARM_SINGLE | $MACOS_ARM_MULTI |" >> benchmark-report.md
          
      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: benchmark-report.md
          retention-days: 90
